C251 COMPILER V5.60.0,  fuse                                                               25/05/24  09:55:38  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE fuse
OBJECT MODULE PLACED IN .\Out_File\fuse.obj
COMPILER INVOKED BY: E:\keil5\C251\BIN\C251.EXE ..\USER\src\fuse.c XSMALL INTR2 ROM(HUGE) WARNINGLEVEL(3) BROWSE INCDIR(
                    -..\..\Libraries\libraries;..\..\Libraries\seekfree_libraries;..\..\Libraries\seekfree_peripheral;..\CODE;..\USER\inc;..\
                    -USER\src) DEBUG PRINT(.\Out_File\fuse.lst) OBJECT(.\Out_File\fuse.obj) 

stmt  level    source

    1          #include "fuse.h"
    2          
    3          PID SpeedPID = {0};
    4          PID L_SpeedPID ={0};
    5          PID R_SpeedPID ={0};
    6          PID TurnPID ={0};
    7          PID Turn_NeiPID ={0};
    8          PID TurnPID_wan ={0};
    9          PID Turn_NeiPID_wan ={0};
   10          PID TurnPID_RTwan ={0};
   11          PID Turn_NeiPID_RTwan ={0};
   12          
   13          /****************************PID参数初始化**************************************
   14          函数：  void PID_int(void)
   15          参数：  void
   16          说明：  PID每个环参数初始化
   17          返回值：void
   18          ********************************************************************************/
   19          void PID_int(void)
   20          {
   21   1              L_SpeedPID.Kp=0.5;     //速度环PID参数（D车用，速度环2ms）
   22   1              L_SpeedPID.Ki=0.05;
   23   1              L_SpeedPID.Kd=0;
   24   1              
   25   1              R_SpeedPID.Kp=0.1;       //速度环PID参数（D车用，速度环2ms） 
   26   1              R_SpeedPID.Ki=0.05;
   27   1              R_SpeedPID.Kd=0;
   28   1              
   29   1              TurnPID.Kp=20.0;       //转向外环PID参数 
   30   1              TurnPID.Ki=1;
   31   1              TurnPID.Kd=20;
   32   1              TurnPID.Kc=1;
   33   1              
   34   1      //      Turn_NeiPID.Kp=0.125;  //角速度内环PID参数
   35   1      //      Turn_NeiPID.Ki=0;
   36   1      //      Turn_NeiPID.Kd=0.5;
   37   1      //      
   38   1      //      TurnPID_wan.Kp=100.0;       //弯道转向外环PID参数 
   39   1      //      TurnPID_wan.Ki=0;
   40   1      //      TurnPID_wan.Kd=8;
   41   1      //      
   42   1      //      Turn_NeiPID_wan.Kp=0.13;  //弯道角速度内环PID参数
   43   1      //      Turn_NeiPID_wan.Ki=0.3;
   44   1      //      Turn_NeiPID_wan.Kd=0.5;
   45   1      //      
   46   1      //      TurnPID_RTwan.Kp=80.0;       //直角弯道转向外环PID参数 
   47   1      //      TurnPID_RTwan.Ki=0;
   48   1      //      TurnPID_RTwan.Kd=8;
   49   1      //      
   50   1      //      Turn_NeiPID_RTwan.Kp=0.4;  //直角弯道角速度内环PID参数
   51   1      //      Turn_NeiPID_RTwan.Ki=0;
   52   1      //      Turn_NeiPID_RTwan.Kd=0.5;
   53   1      }
   54          static TASK_COMPONENTS TaskComps[] =
   55          {
   56              {0,  1,  1, Motor_output_control},         //角速度内环和D车速度环2ms
   57              {0,  5,  5, Trailing_control},           //转向外环5ms
C251 COMPILER V5.60.0,  fuse                                                               25/05/24  09:55:38  PAGE 2   

   58          };
   59          /**************************************************************************************
   60          * FunctionName   : TaskRemarks()
   61          * Description    : 任务标志处理
   62          * EntryParameter : None
   63          * ReturnValue    : None
   64          * attention      : ***在定时器中断中调用此函数即可***
   65          **************************************************************************************/
   66          void TaskRemarks(void)
   67          {
   68   1          uint8 i;
   69   1          for (i=0; i<TASKS_MAX; i++)          // 逐个任务时间处理
   70   1          {
   71   2              if (TaskComps[i].Timer)          // 时间不为0
   72   2              {
   73   3                 TaskComps[i].Timer--;         // 减去一个节拍
   74   3                 if (TaskComps[i].Timer == 0)       // 时间减完了
   75   3                 {
   76   4                   TaskComps[i].Timer = TaskComps[i].ItvTime; // 恢复计时器值，从新下一次
   77   4                   TaskComps[i].Run = 1;           // 任务可以运行
   78   4                 }
   79   3              }
   80   2         }
   81   1      }
   82          
   83          /**************************************************************************************
   84          * FunctionName   : TaskProcess()
   85          * Description    : 任务处理|判断什么时候该执行那一个任务
   86          * EntryParameter : None
   87          * ReturnValue    : None
   88          * * attention      : ***放在mian的while(1)即可***
   89          **************************************************************************************/
   90          void TaskProcess(void)
   91          {
   92   1          uint8 i; 
   93   1                for (i=0; i<TASKS_MAX; i++)           // 逐个任务时间处理
   94   1          {
   95   2              if (TaskComps[i].Run)           // 时间不为0
   96   2              {
   97   3                  TaskComps[i].TaskHook();       // 运行任务
   98   3                  TaskComps[i].Run = 0;          // 标志清0
   99   3              }
  100   2          }
  101   1      }
  102          
  103          /****************************角速度内环**************************************
  104          函数：  void Motor_output_control()
  105          参数：  void
  106          说明：  角速度内环和D车速度环
  107          返回值：void
  108          ***************************************************************************************/
  109          void Motor_output_control()
  110          {
  111   1                              //imu660ra_get_gyro();   //获取陀螺仪角速度值
  112   1                              speed_measure();       //编码器测量
  113   1                              
  114   1                              //Speed_pwm_all = LocP_DCalc(&SpeedPID,aim_speed,real_speed); //D车速度环（位置式）
  115   1      
  116   1                              aim_speed = 800;       //目标速度
  117   1                              //Speed_pwm_all += IncPIDCalc(&SpeedPID,aim_speed,real_speed);//D车速度环（增量式）
  118   1              
  119   1                              //Steer_pwm=LocP_DCalc(&TurnPID,imu660ra_gyro_z,ADC_PWM);   //转向内环PWM       
  120   1                              //Steer_pwm=range_protect(Steer_pwm,-5000,5000);                                                        //转向内环PWM限幅
  121   1      
  122   1                              All_PWM_left = aim_speed + ADC_PWM;                         //左电机所有PWM输出 
  123   1                              All_PWM_right= aim_speed - 0.6 * ADC_PWM;                   //右电机所有PWM输出
C251 COMPILER V5.60.0,  fuse                                                               25/05/24  09:55:38  PAGE 3   

  124   1              
  125   1                      
  126   1      //                      All_PWM_left = IncPIDCalc(&L_SpeedPID,All_PWM_left,left_speed*2);//D车速度环（增量式）
  127   1      //                      All_PWM_right = IncPIDCalc(&R_SpeedPID,All_PWM_right,right_speed*2);//D车速度环（增量式）
  128   1              
  129   1              
  130   1              
  131   1                              go_motor(All_PWM_left,All_PWM_right);                                                                                    //动力输出
  132   1                      
  133   1                      
  134   1                        ips114_showint16(122,6,All_PWM_left);
  135   1                              ips114_showint16(122,7,All_PWM_right);
  136   1                              ips114_showint16(122,8,Steer_pwm);
  137   1      //              printf("left_pwm=%d \n",All_PWM_left);
  138   1      //              printf("right_pwm=%d \n",All_PWM_right);
  139   1                                   
  140   1      }
  141          /****************************转向环（转向外环）**************************************
  142          函数：  void Trailing_control()
  143          参数：  void
  144          说明：  转向环（转向外环）
  145          返回值：void
  146          ***************************************************************************************/
  147          void Trailing_control()
  148          {
  149   1                Get_deviation();  //电磁采集并获取赛道偏差
  150   1              //  Annulus_assist(); //环岛辅助函数
  151   1      
  152   1                      ADC_PWM = LocP_DCalc(&TurnPID,0,Current_Dir);//位置式PD控制转向
  153   1      
  154   1      }
  155          
  156          /***************************************************************************************
  157          函数名：int16 range_protect(int16 duty, int16 min, int16 max)
  158          功  能：限幅保护 
  159          参  数：
  160          返回值：duty
  161          **************************************************************************************/
  162          int16 range_protect(int16 duty, int16 min, int16 max)//限幅保护
  163          {
  164   1        if (duty >= max)
  165   1        {
  166   2          return max;
  167   2        }
  168   1        if (duty <= min)
  169   1        {
  170   2          return min;
  171   2        }
  172   1        else
  173   1        {
  174   2          return duty;
  175   2        }
  176   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =    ------     ------
  ecode size           =       354     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =       302     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
C251 COMPILER V5.60.0,  fuse                                                               25/05/24  09:55:38  PAGE 4   

  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =       342     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
